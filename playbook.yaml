- name: install postgres
  hosts: all
  gather_facts: false
  tasks:
    - name: install postgresql
      package:
        name: postgresql
        state: present
    - name: install psycopg
      package:
        name: postgresql-contrib
        state: present
    - name: install libpq-dev
      package:
        name: libpq-dev
        state: present
- name: db-master
  hosts: host01
  gather_facts: false
  tasks:
    - name: copy and render init.sql template
      template:
        src: /home/user/ansible/init.sql
        dest: /tmp/init.sql
        mode: '0644'

    - name: restart PostgreSQL service
      service:
        name: postgresql
        state: restarted
      become: true

    - name: execute init.sql script
      command: psql -a -f /tmp/init.sql
      become: true
      become_user: postgres

- name: master-config
  hosts: host01
  gather_facts: false
  tasks:
    - name: add to conf file
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          wal_level=replica
          hot_standby=on
          max_wal_senders=10
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on
    - name: pg_hba conf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: |
          host replication all {{ hostvars[inventory_hostname]['ansible_host'] }}/24 scram-sha-256
          host all all {{ hostvars[inventory_hostname]['ansible_host'] }}/32 trust
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

- name: slave-config and just slave
  hosts: host02
  gather_facts: false
  tasks:
    - name: rm
      command: rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/
    - name: pg_basebackup
      command: pg_basebackup -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -D /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/ -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -vP -w
      environment:
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
    - name: chown
      command: chown -R postgres:postgres /var/lib/postgresql/
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

- name: python bot
  hosts: host01
  gather_facts: false
  tasks:
    - name: mkdir
      command: mkdir -p "{{ hostvars[inventory_hostname]['dir'] }}/repo"
    - name: git clone
      git:
        repo: https://github.com/lonai/talking_to_the_moon
        dest: "{{ hostvars[inventory_hostname]['dir'] }}/repo"
        version: main
    - name: pip install
      pip:
        requirements: "{{ hostvars[inventory_hostname]['dir'] }}/repo/requirements.txt"
    - name: mkdir logs
      command: mkdir -p "{{ hostvars[inventory_hostname]['dir'] }}/../logs"
    - name: run python bot
      command: python3 "{{ hostvars[inventory_hostname]['dir'] }}/repo/bot.py"
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        PG_VERSION: "{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"